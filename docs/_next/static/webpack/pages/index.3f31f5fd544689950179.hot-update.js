webpackHotUpdate_N_E("pages/index",{

/***/ "./components/organisms/group-card.jsx":
/*!*********************************************!*\
  !*** ./components/organisms/group-card.jsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _molecules_social_icons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../molecules/social-icons */ "./components/molecules/social-icons.jsx");
/* harmony import */ var _atoms_loading_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../atoms/loading-icon */ "./components/atoms/loading-icon.jsx");
/* harmony import */ var _atoms_ribbon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../atoms/ribbon */ "./components/atoms/ribbon.jsx");
/* harmony import */ var _molecules_charity_banner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../molecules/charity-banner */ "./components/molecules/charity-banner.jsx");


var _this = undefined,
    _jsxFileName = "C:\\Users\\jared\\Documents\\GitHub\\CACreators.com\\components\\organisms\\group-card.jsx";


var __jsx = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









var GroupCard = function GroupCard(_ref) {
  var group = _ref.group,
      loading = _ref.loading,
      totalCards = _ref.totalCards,
      position = _ref.position;
  var isFirst = !loading && position === 1;
  var isLast = !loading && position === totalCards;
  var backgroundImage = '';
  var socialIcons = null;
  var startsInSevenDays = null;
  var nextEvent = {
    title: 'TBA',
    date: 'Click here for updates',
    url: loading ? '#' : group.url
  };

  if (!loading) {
    if (group.path) {
      backgroundImage = "background-image: url('/".concat(group.path, "');");
    }

    if (group.links && group.name) {
      socialIcons = __jsx(_molecules_social_icons__WEBPACK_IMPORTED_MODULE_5__["default"], {
        links: group.links,
        groupName: group.name,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 26,
          columnNumber: 21
        }
      });
    }

    if (Object.keys(group.nextEvent).length) {
      var _group$nextEvent = group.nextEvent,
          url = _group$nextEvent.url,
          title = _group$nextEvent.title;
      var startDate = group.nextEvent.start_date;
      var sevenDays = moment__WEBPACK_IMPORTED_MODULE_4___default()().add(8, 'days');
      startsInSevenDays = moment__WEBPACK_IMPORTED_MODULE_4___default()(startDate).isBefore(sevenDays);
      nextEvent = _objectSpread(_objectSpread({}, nextEvent), {}, {
        title: title,
        date: moment__WEBPACK_IMPORTED_MODULE_4___default()(startDate).format('MMM Do YYYY'),
        url: loading ? '#' : url
      });
    }
  }

  var cardInfo = __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, __jsx("span", {
    className: "jsx-3014015982" + " " + "loadingIcon",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46,
      columnNumber: 7
    }
  }, __jsx(_atoms_loading_icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 47,
      columnNumber: 9
    }
  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {
    id: "3014015982",
    __self: _this
  }, ".loadingIcon.jsx-3014015982{position:absolute;font-size:100px;top:50%;right:50%;-webkit-transform:translate(50%,-50%);-ms-transform:translate(50%,-50%);transform:translate(50%,-50%);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\jared\\\\Documents\\\\GitHub\\\\CACreators.com\\\\components\\\\organisms\\\\group-card.jsx */"));

  var charityBanner = !loading && (group === null || group === void 0 ? void 0 : group.charity) ? __jsx(_molecules_charity_banner__WEBPACK_IMPORTED_MODULE_8__["default"], {
    charity: group.charity,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 64,
      columnNumber: 7
    }
  }) : null;

  if (!loading) {
    cardInfo = __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, __jsx("h4", {
      className: "jsx-222618662",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 69,
        columnNumber: 9
      }
    }, "Next Event"), __jsx("h3", {
      className: "jsx-222618662",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 70,
        columnNumber: 9
      }
    }, group.name), __jsx("h5", {
      className: "jsx-222618662" + " " + "event-title",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 71,
        columnNumber: 9
      }
    }, nextEvent.title), __jsx("span", {
      className: "jsx-222618662" + " " + "event-date",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 9
      }
    }, nextEvent.date), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {
      id: "222618662",
      __self: _this
    }, "h4.jsx-222618662{font-weight:700;font-size:20px;margin:12px 0 0;}h3.jsx-222618662{margin:0;color:#fff;font-size:22px;font-weight:700;position:absolute;bottom:10px;}.event-date.jsx-222618662{font-size:18px;color:#fff;font-weight:400;-webkit-text-decoration:overline;text-decoration:overline;margin-top:8px;display:block;}.event-title.jsx-222618662{font-weight:700;font-size:2em;margin:12px 0 0;overflow:hidden;max-height:180px;line-height:35px;}@media (max-width:900px){h4.jsx-222618662{font-size:28px;}h3.jsx-222618662{font-size:30px;}.event-title.jsx-222618662{max-height:145px;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\jared\\\\Documents\\\\GitHub\\\\CACreators.com\\\\components\\\\organisms\\\\group-card.jsx */"));
  }

  var renderRibbon = function renderRibbon(startsSoon) {
    if (startsSoon) return __jsx(_atoms_ribbon__WEBPACK_IMPORTED_MODULE_7__["default"], {
      text: "Soon!",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 122,
        columnNumber: 28
      }
    });
    return null;
  };

  var firstLastClass = '';

  if (isFirst) {
    firstLastClass = 'first-card';
  } else if (isLast) {
    firstLastClass = 'last-card';
  }

  return __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([["618930567", [loading ? '#3d2769' : '#555', backgroundImage]]]) + " " + "card-container ".concat(firstLastClass),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 133,
      columnNumber: 5
    }
  }, charityBanner, __jsx("a", {
    href: nextEvent.url,
    name: group.name,
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([["618930567", [loading ? '#3d2769' : '#555', backgroundImage]]]),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135,
      columnNumber: 7
    }
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([["618930567", [loading ? '#3d2769' : '#555', backgroundImage]]]) + " " + "card ".concat(startsInSevenDays ? 'glow' : ''),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136,
      columnNumber: 9
    }
  }, renderRibbon(startsInSevenDays), cardInfo, __jsx("span", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([["618930567", [loading ? '#3d2769' : '#555', backgroundImage]]]) + " " + "card-background",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 11
    }
  }))), socialIcons, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {
    id: "618930567",
    dynamic: [loading ? '#3d2769' : '#555', backgroundImage],
    __self: _this
  }, ".card-container.__jsx-style-dynamic-selector{position:absolute;display:inline-block;-webkit-transition:all 0.6s cubic-bezier(0.4,0,0.2,1);transition:all 0.6s cubic-bezier(0.4,0,0.2,1);-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);left:50%;}.first-card.__jsx-style-dynamic-selector{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);transform:translateX(0%);left:0%;}.last-card.__jsx-style-dynamic-selector{-webkit-transform:translateX(-100%);-ms-transform:translateX(-100%);transform:translateX(-100%);left:100%;}a.__jsx-style-dynamic-selector:link{-webkit-text-decoration:none;text-decoration:none;}.card.__jsx-style-dynamic-selector{position:relative;width:250px;height:300px;padding:18px;color:#fff;text-align:left;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:all 150ms,-webkit-transform 150ms cubic-bezier(0,0,0.2,1);-webkit-transition:all 150ms,transform 150ms cubic-bezier(0,0,0.2,1);transition:all 150ms,transform 150ms cubic-bezier(0,0,0.2,1);-webkit-filter:drop-shadow(0 5px 3px rgba(0,0,0,0.4)) drop-shadow(0 -4px 3px rgba(0,0,0,0.3));filter:drop-shadow(0 5px 3px rgba(0,0,0,0.4)) drop-shadow(0 -4px 3px rgba(0,0,0,0.3));border-radius:20px;text-shadow:0 2px 10px rgba(0,0,0,0.8);word-break:break-word;}.glow.__jsx-style-dynamic-selector{-webkit-animation:fadein-__jsx-style-dynamic-selector 1.5s ease-out infinite alternate;animation:fadein-__jsx-style-dynamic-selector 1.5s ease-out infinite alternate;}@-webkit-keyframes fadein-__jsx-style-dynamic-selector{from{-webkit-filter:drop-shadow(0 0 15px rgba(255,255,255,0.2));filter:drop-shadow(0 0 15px rgba(255,255,255,0.2));}to{-webkit-filter:drop-shadow(0 0 25px rgba(255,255,255,1));filter:drop-shadow(0 0 25px rgba(255,255,255,1));}}@keyframes fadein-__jsx-style-dynamic-selector{from{-webkit-filter:drop-shadow(0 0 15px rgba(255,255,255,0.2));filter:drop-shadow(0 0 15px rgba(255,255,255,0.2));}to{-webkit-filter:drop-shadow(0 0 25px rgba(255,255,255,1));filter:drop-shadow(0 0 25px rgba(255,255,255,1));}}.card.__jsx-style-dynamic-selector::after{content:'';border-radius:20px;position:absolute;z-index:-1;top:0;left:0;width:100%;height:100%;-webkit-filter:drop-shadow(0 8px 6px rgba(0,0,0,0.3)) drop-shadow(0 0px 6px rgba(0,0,0,0.2));filter:drop-shadow(0 8px 6px rgba(0,0,0,0.3)) drop-shadow(0 0px 6px rgba(0,0,0,0.2));opacity:0;-webkit-transition:all 150ms,-webkit-transform 150ms cubic-bezier(0,0,0.2,1);-webkit-transition:all 150ms,transform 150ms cubic-bezier(0,0,0.2,1);transition:all 150ms,transform 150ms cubic-bezier(0,0,0.2,1);}.card.__jsx-style-dynamic-selector:hover{-webkit-transform:scale(1.06);-ms-transform:scale(1.06);transform:scale(1.06);-webkit-font-smoothing:subpixel-antialiased;}.card.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector::after{opacity:1;}.card-background.__jsx-style-dynamic-selector{background:".concat(loading ? '#3d2769' : '#555', ";").concat(backgroundImage, " background-size:cover;background-position:center;width:100%;height:100%;position:absolute;left:0;border-radius:20px;z-index:-100;top:0;}.card-background.__jsx-style-dynamic-selector:before{content:'';position:absolute;height:100%;width:100%;border-radius:20px;background-color:rgba(0,0,0,0.4);}@media (max-width:900px){.card-container.__jsx-style-dynamic-selector{position:relative;margin:0 auto;width:80%;-webkit-transform:translateX(0);-ms-transform:translateX(0);transform:translateX(0);left:0%;margin-bottom:75px;}.last-card.__jsx-style-dynamic-selector{margin-bottom:15px;}.card.__jsx-style-dynamic-selector{width:auto;margin-bottom:15px;}.card.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{font-size:26px;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\jared\\\\Documents\\\\GitHub\\\\CACreators.com\\\\components\\\\organisms\\\\group-card.jsx */")));
};

_c = GroupCard;
GroupCard.propTypes = {
  loading: prop_types__WEBPACK_IMPORTED_MODULE_3__["bool"].isRequired,
  totalCards: prop_types__WEBPACK_IMPORTED_MODULE_3__["number"].isRequired,
  position: prop_types__WEBPACK_IMPORTED_MODULE_3__["number"].isRequired,
  group: Object(prop_types__WEBPACK_IMPORTED_MODULE_3__["shape"])({
    url: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired,
    path: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired,
    links: Object(prop_types__WEBPACK_IMPORTED_MODULE_3__["arrayOf"])(Object(prop_types__WEBPACK_IMPORTED_MODULE_3__["shape"])({
      url: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired,
      site: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired
    })),
    name: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired,
    nextEvent: Object(prop_types__WEBPACK_IMPORTED_MODULE_3__["shape"])({
      url: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"],
      start_date: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"],
      title: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"]
    }),
    charity: Object(prop_types__WEBPACK_IMPORTED_MODULE_3__["shape"])({
      url: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired,
      image: prop_types__WEBPACK_IMPORTED_MODULE_3__["string"].isRequired
    })
  }).isRequired
};
/* harmony default export */ __webpack_exports__["default"] = (GroupCard);

var _c;

$RefreshReg$(_c, "GroupCard");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9vcmdhbmlzbXMvZ3JvdXAtY2FyZC5qc3giXSwibmFtZXMiOlsiR3JvdXBDYXJkIiwiZ3JvdXAiLCJsb2FkaW5nIiwidG90YWxDYXJkcyIsInBvc2l0aW9uIiwiaXNGaXJzdCIsImlzTGFzdCIsImJhY2tncm91bmRJbWFnZSIsInNvY2lhbEljb25zIiwic3RhcnRzSW5TZXZlbkRheXMiLCJuZXh0RXZlbnQiLCJ0aXRsZSIsImRhdGUiLCJ1cmwiLCJwYXRoIiwibGlua3MiLCJuYW1lIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInN0YXJ0RGF0ZSIsInN0YXJ0X2RhdGUiLCJzZXZlbkRheXMiLCJtb21lbnQiLCJhZGQiLCJpc0JlZm9yZSIsImZvcm1hdCIsImNhcmRJbmZvIiwiY2hhcml0eUJhbm5lciIsImNoYXJpdHkiLCJyZW5kZXJSaWJib24iLCJzdGFydHNTb29uIiwiZmlyc3RMYXN0Q2xhc3MiLCJwcm9wVHlwZXMiLCJib29sIiwiaXNSZXF1aXJlZCIsIm51bWJlciIsInNoYXBlIiwic3RyaW5nIiwiYXJyYXlPZiIsInNpdGUiLCJpbWFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsU0FBUyxHQUFHLFNBQVpBLFNBQVksT0FBOEM7QUFBQSxNQUEzQ0MsS0FBMkMsUUFBM0NBLEtBQTJDO0FBQUEsTUFBcENDLE9BQW9DLFFBQXBDQSxPQUFvQztBQUFBLE1BQTNCQyxVQUEyQixRQUEzQkEsVUFBMkI7QUFBQSxNQUFmQyxRQUFlLFFBQWZBLFFBQWU7QUFDOUQsTUFBTUMsT0FBTyxHQUFHLENBQUNILE9BQUQsSUFBWUUsUUFBUSxLQUFLLENBQXpDO0FBQ0EsTUFBTUUsTUFBTSxHQUFHLENBQUNKLE9BQUQsSUFBWUUsUUFBUSxLQUFLRCxVQUF4QztBQUNBLE1BQUlJLGVBQWUs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Z0ZVSyxlQWhGVjtBQUFBO0FBQUEsNjFGQStFc0JMLE9BQU8sR0FBRyxTQUFILEdBQWUsTUEvRTVDLGNBZ0ZVSyxlQWhGVixxMFlBREY7QUE2SEQsQ0F4UEQ7O0tBQU1QLFM7QUEwUE5BLFNBQVMsQ0FBQ2lDLFNBQVYsR0FBc0I7QUFDcEIvQixTQUFPLEVBQUVnQywrQ0FBSSxDQUFDQyxVQURNO0FBRXBCaEMsWUFBVSxFQUFFaUMsaURBQU0sQ0FBQ0QsVUFGQztBQUdwQi9CLFVBQVEsRUFBRWdDLGlEQUFNLENBQUNELFVBSEc7QUFJcEJsQyxPQUFLLEVBQUVvQyx3REFBSyxDQUFDO0FBQ1h4QixPQUFHLEVBQUV5QixpREFBTSxDQUFDSCxVQUREO0FBRVhyQixRQUFJLEVBQUV3QixpREFBTSxDQUFDSCxVQUZGO0FBR1hwQixTQUFLLEVBQUV3QiwwREFBTyxDQUNaRix3REFBSyxDQUFDO0FBQ0p4QixTQUFHLEVBQUV5QixpREFBTSxDQUFDSCxVQURSO0FBRUpLLFVBQUksRUFBRUYsaURBQU0sQ0FBQ0g7QUFGVCxLQUFELENBRE8sQ0FISDtBQVNYbkIsUUFBSSxFQUFFc0IsaURBQU0sQ0FBQ0gsVUFURjtBQVVYekIsYUFBUyxFQUFFMkIsd0RBQUssQ0FBQztBQUNmeEIsU0FBRyxFQUFFeUIsaURBRFU7QUFFZmpCLGdCQUFVLEVBQUVpQixpREFGRztBQUdmM0IsV0FBSyxFQUFFMkIsaURBQU1BO0FBSEUsS0FBRCxDQVZMO0FBZVhULFdBQU8sRUFBRVEsd0RBQUssQ0FBQztBQUNieEIsU0FBRyxFQUFFeUIsaURBQU0sQ0FBQ0gsVUFEQztBQUViTSxXQUFLLEVBQUVILGlEQUFNLENBQUNIO0FBRkQsS0FBRDtBQWZILEdBQUQsQ0FBTCxDQW1CSkE7QUF2QmlCLENBQXRCO0FBMEJlbkMsd0VBQWYiLCJmaWxlIjoic3RhdGljL3dlYnBhY2svcGFnZXMvaW5kZXguM2YzMWY1ZmQ1NDQ2ODk5NTAxNzkuaG90LXVwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGFycmF5T2YsIGJvb2wsIG51bWJlciwgc2hhcGUsIHN0cmluZyB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IFNvY2lhbEljb25zIGZyb20gJy4uL21vbGVjdWxlcy9zb2NpYWwtaWNvbnMnO1xuaW1wb3J0IExvYWRpbmdJY29uIGZyb20gJy4uL2F0b21zL2xvYWRpbmctaWNvbic7XG5pbXBvcnQgUmliYm9uIGZyb20gJy4uL2F0b21zL3JpYmJvbic7XG5pbXBvcnQgQ2hhcml0eUJhbm5lciBmcm9tICcuLi9tb2xlY3VsZXMvY2hhcml0eS1iYW5uZXInO1xuXG5jb25zdCBHcm91cENhcmQgPSAoeyBncm91cCwgbG9hZGluZywgdG90YWxDYXJkcywgcG9zaXRpb24gfSkgPT4ge1xuICBjb25zdCBpc0ZpcnN0ID0gIWxvYWRpbmcgJiYgcG9zaXRpb24gPT09IDE7XG4gIGNvbnN0IGlzTGFzdCA9ICFsb2FkaW5nICYmIHBvc2l0aW9uID09PSB0b3RhbENhcmRzO1xuICBsZXQgYmFja2dyb3VuZEltYWdlID0gJyc7XG4gIGxldCBzb2NpYWxJY29ucyA9IG51bGw7XG4gIGxldCBzdGFydHNJblNldmVuRGF5cyA9IG51bGw7XG4gIGxldCBuZXh0RXZlbnQgPSB7XG4gICAgdGl0bGU6ICdUQkEnLFxuICAgIGRhdGU6ICdDbGljayBoZXJlIGZvciB1cGRhdGVzJyxcbiAgICB1cmw6IGxvYWRpbmcgPyAnIycgOiBncm91cC51cmwsXG4gIH07XG5cbiAgaWYgKCFsb2FkaW5nKSB7XG4gICAgaWYgKGdyb3VwLnBhdGgpIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSA9IGBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy8ke2dyb3VwLnBhdGh9Jyk7YDtcbiAgICB9XG4gICAgaWYgKGdyb3VwLmxpbmtzICYmIGdyb3VwLm5hbWUpIHtcbiAgICAgIHNvY2lhbEljb25zID0gPFNvY2lhbEljb25zIGxpbmtzPXtncm91cC5saW5rc30gZ3JvdXBOYW1lPXtncm91cC5uYW1lfSAvPjtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZ3JvdXAubmV4dEV2ZW50KS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHsgdXJsLCB0aXRsZSB9ID0gZ3JvdXAubmV4dEV2ZW50O1xuICAgICAgY29uc3Qgc3RhcnREYXRlID0gZ3JvdXAubmV4dEV2ZW50LnN0YXJ0X2RhdGU7XG4gICAgICBjb25zdCBzZXZlbkRheXMgPSBtb21lbnQoKS5hZGQoOCwgJ2RheXMnKTtcbiAgICAgIHN0YXJ0c0luU2V2ZW5EYXlzID0gbW9tZW50KHN0YXJ0RGF0ZSkuaXNCZWZvcmUoc2V2ZW5EYXlzKTtcblxuICAgICAgbmV4dEV2ZW50ID0ge1xuICAgICAgICAuLi5uZXh0RXZlbnQsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBkYXRlOiBtb21lbnQoc3RhcnREYXRlKS5mb3JtYXQoJ01NTSBEbyBZWVlZJyksXG4gICAgICAgIHVybDogbG9hZGluZyA/ICcjJyA6IHVybCxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgbGV0IGNhcmRJbmZvID0gKFxuICAgIDw+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJsb2FkaW5nSWNvblwiPlxuICAgICAgICA8TG9hZGluZ0ljb24gLz5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgIHtgXG4gICAgICAgICAgLmxvYWRpbmdJY29uIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTAwcHg7XG4gICAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICAgIHJpZ2h0OiA1MCU7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIC01MCUpO1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC8+XG4gICk7XG4gIGNvbnN0IGNoYXJpdHlCYW5uZXIgPVxuICAgICFsb2FkaW5nICYmIGdyb3VwPy5jaGFyaXR5ID8gKFxuICAgICAgPENoYXJpdHlCYW5uZXIgY2hhcml0eT17Z3JvdXAuY2hhcml0eX0gLz5cbiAgICApIDogbnVsbDtcbiAgaWYgKCFsb2FkaW5nKSB7XG4gICAgY2FyZEluZm8gPSAoXG4gICAgICA8PlxuICAgICAgICA8aDQ+TmV4dCBFdmVudDwvaDQ+XG4gICAgICAgIDxoMz57Z3JvdXAubmFtZX08L2gzPlxuICAgICAgICA8aDUgY2xhc3NOYW1lPVwiZXZlbnQtdGl0bGVcIj57bmV4dEV2ZW50LnRpdGxlfTwvaDU+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImV2ZW50LWRhdGVcIj57bmV4dEV2ZW50LmRhdGV9PC9zcGFuPlxuICAgICAgICA8c3R5bGUganN4PlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICBoNCB7XG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgICAgbWFyZ2luOiAxMnB4IDAgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGgzIHtcbiAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xuICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgIGJvdHRvbTogMTBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5ldmVudC1kYXRlIHtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBvdmVybGluZTtcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDogOHB4O1xuICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5ldmVudC10aXRsZSB7XG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgICAgICAgICAgICBtYXJnaW46IDEycHggMCAwO1xuICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAxODBweDtcbiAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDM1cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgICAgICAgICAgaDQge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoMyB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC5ldmVudC10aXRsZSB7XG4gICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMTQ1cHg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJlbmRlclJpYmJvbiA9IChzdGFydHNTb29uKSA9PiB7XG4gICAgaWYgKHN0YXJ0c1Nvb24pIHJldHVybiA8UmliYm9uIHRleHQ9XCJTb29uIVwiIC8+O1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGxldCBmaXJzdExhc3RDbGFzcyA9ICcnO1xuICBpZiAoaXNGaXJzdCkge1xuICAgIGZpcnN0TGFzdENsYXNzID0gJ2ZpcnN0LWNhcmQnO1xuICB9IGVsc2UgaWYgKGlzTGFzdCkge1xuICAgIGZpcnN0TGFzdENsYXNzID0gJ2xhc3QtY2FyZCc7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9e2BjYXJkLWNvbnRhaW5lciAke2ZpcnN0TGFzdENsYXNzfWB9PlxuICAgICAge2NoYXJpdHlCYW5uZXJ9XG4gICAgICA8YSBocmVmPXtuZXh0RXZlbnQudXJsfSBuYW1lPXtncm91cC5uYW1lfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BjYXJkICR7c3RhcnRzSW5TZXZlbkRheXMgPyAnZ2xvdycgOiAnJ31gfT5cbiAgICAgICAgICB7cmVuZGVyUmliYm9uKHN0YXJ0c0luU2V2ZW5EYXlzKX1cbiAgICAgICAgICB7Y2FyZEluZm99XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZC1iYWNrZ3JvdW5kXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2E+XG4gICAgICB7c29jaWFsSWNvbnN9XG4gICAgICA8c3R5bGUganN4PlxuICAgICAgICB7YFxuICAgICAgICAgIC5jYXJkLWNvbnRhaW5lciB7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC42cyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgICAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuZmlyc3QtY2FyZCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCUpO1xuICAgICAgICAgICAgbGVmdDogMCU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5sYXN0LWNhcmQge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcbiAgICAgICAgICAgIGxlZnQ6IDEwMCU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYTpsaW5rIHtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmNhcmQge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgd2lkdGg6IDI1MHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAzMDBweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDE4cHg7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMTUwbXMsIHRyYW5zZm9ybSAxNTBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTtcbiAgICAgICAgICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMCA1cHggM3B4IHJnYmEoMCwgMCwgMCwgMC40KSlcbiAgICAgICAgICAgICAgZHJvcC1zaGFkb3coMCAtNHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMykpO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICAgICAgICAgIHRleHQtc2hhZG93OiAwIDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC44KTtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5nbG93IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogZmFkZWluIDEuNXMgZWFzZS1vdXQgaW5maW5pdGUgYWx0ZXJuYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBAa2V5ZnJhbWVzIGZhZGVpbiB7XG4gICAgICAgICAgICBmcm9tIHtcbiAgICAgICAgICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwIDAgMTVweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG8ge1xuICAgICAgICAgICAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDAgMCAyNXB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAuY2FyZDo6YWZ0ZXIge1xuICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgei1pbmRleDogLTE7XG4gICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDAgOHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMykpXG4gICAgICAgICAgICAgIGRyb3Atc2hhZG93KDAgMHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMikpO1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAxNTBtcywgdHJhbnNmb3JtIDE1MG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuY2FyZDpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDYpO1xuICAgICAgICAgICAgLXdlYmtpdC1mb250LXNtb290aGluZzogc3VicGl4ZWwtYW50aWFsaWFzZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5jYXJkOmhvdmVyOjphZnRlciB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuY2FyZC1iYWNrZ3JvdW5kIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7bG9hZGluZyA/ICcjM2QyNzY5JyA6ICcjNTU1J307XG4gICAgICAgICAgICAke2JhY2tncm91bmRJbWFnZX1cbiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgICAgICAgICAgei1pbmRleDogLTEwMDtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmNhcmQtYmFja2dyb3VuZDpiZWZvcmUge1xuICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICAgICAgICAuY2FyZC1jb250YWluZXIge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgICAgICAgICB3aWR0aDogODAlO1xuICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgICAgICAgICAgIGxlZnQ6IDAlO1xuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA3NXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmxhc3QtY2FyZCB7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuY2FyZCB7XG4gICAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmNhcmQgcCB7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvc3Bhbj5cbiAgKTtcbn07XG5cbkdyb3VwQ2FyZC5wcm9wVHlwZXMgPSB7XG4gIGxvYWRpbmc6IGJvb2wuaXNSZXF1aXJlZCxcbiAgdG90YWxDYXJkczogbnVtYmVyLmlzUmVxdWlyZWQsXG4gIHBvc2l0aW9uOiBudW1iZXIuaXNSZXF1aXJlZCxcbiAgZ3JvdXA6IHNoYXBlKHtcbiAgICB1cmw6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHBhdGg6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxpbmtzOiBhcnJheU9mKFxuICAgICAgc2hhcGUoe1xuICAgICAgICB1cmw6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBzaXRlOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIH0pXG4gICAgKSxcbiAgICBuYW1lOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBuZXh0RXZlbnQ6IHNoYXBlKHtcbiAgICAgIHVybDogc3RyaW5nLFxuICAgICAgc3RhcnRfZGF0ZTogc3RyaW5nLFxuICAgICAgdGl0bGU6IHN0cmluZyxcbiAgICB9KSxcbiAgICBjaGFyaXR5OiBzaGFwZSh7XG4gICAgICB1cmw6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgaW1hZ2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH0pLFxuICB9KS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgR3JvdXBDYXJkO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==